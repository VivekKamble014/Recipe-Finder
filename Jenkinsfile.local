pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'recipe-finder'
        DOCKER_TAG = "${BUILD_NUMBER}"
        REGISTRY_URL = 'localhost:5000'  // Local registry or Docker Hub
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing npm dependencies...'
                sh 'npm ci'
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running ESLint...'
                sh 'npm run lint'
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building React application...'
                sh 'npm run build'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").tag("${DOCKER_IMAGE}:latest")
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'Testing Docker image...'
                sh '''
                    docker run -d --name recipe-finder-test -p 3001:80 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    sleep 10
                    curl -f http://localhost:3001 || exit 1
                    docker stop recipe-finder-test
                    docker rm recipe-finder-test
                '''
            }
        }
        
        stage('Deploy Locally') {
            steps {
                echo 'Deploying application locally...'
                sh '''
                    # Stop existing container if running
                    docker stop recipe-finder-app || true
                    docker rm recipe-finder-app || true
                    
                    # Start new container
                    docker run -d --name recipe-finder-app -p 3000:80 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    # Wait for container to be ready
                    sleep 15
                    
                    # Verify deployment
                    curl -f http://localhost:3000 || exit 1
                '''
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                environment name: 'SONAR_TOKEN', value: ''
            }
            steps {
                echo 'Running SonarQube analysis...'
                script {
                    try {
                        sh '''
                            sonar-scanner \
                                -Dsonar.projectKey=recipe-finder \
                                -Dsonar.host.url=http://localhost:9001 \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                        '''
                    } catch (Exception e) {
                        echo "SonarQube analysis failed: ${e.getMessage()}"
                        echo "Continuing without SonarQube analysis..."
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh 'docker image prune -f || true'
        }
        success {
            echo 'Pipeline completed successfully!'
            echo "Application is available at: http://localhost:3000"
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
